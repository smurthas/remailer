/**
 * This file provided by Facebook is for non-commercial testing and evaluation
 * purposes only. Facebook reserves all rights not expressly granted.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

var TEXT_HEADER = 'Content-Type: text/plain; charset=UTF-8\n' +
                  'Content-Transfer-Encoding: quoted-printable\n';

var UserLabel = React.createClass({
  render: function() {
    return (
      <span className='userLabel'> {this.props.label} <a href='#'>x</a></span>
    );
  }
});

var LabelAdder = React.createClass({
  getInitialState: function() {
    return {text: ''};
  },
  handleTextChange: function(e) {
    this.setState({text: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var text = this.state.text.trim();
    if (!text) {
      return;
    }
    $.ajax({
      url: '/api/add-class',
      dataType: 'json',
      type: 'POST',
      data: {
        emailId: this.props.id,
        clazz: this.state.text
      },
      success: function(data) {
        console.error('data', data);
        //this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        //this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  render: function() {
    return (
      <form className="labelForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Add a label..."
          value={this.state.text}
          onChange={this.handleTextChange}
        />
        <input type="submit" value="Add Label" />
      </form>
    );
  }
});

var Email = React.createClass({
  rawMarkup: function() {
    var text = this.props.email.text.toString().trim();
    text = text.replace(/(?:\r\n|\r|\n)/g, '\n');

    if (text.indexOf(TEXT_HEADER) === 0) {
      text = text.substring(TEXT_HEADER.length);
    }

    text = text.substring(0, 100);
    text = text.replace(/\n/g, '  ');
    var rawMarkup = marked(text, {sanitize: true});
    return { __html: rawMarkup };
  },

  getInitialState: function() {
    return {
      labels: this.props.email.labels
    }
  },
  render: function() {
    var id = this.props.email.id;
    var labels = this.state.labels.map(function(label) {
      return (
        <UserLabel id={id} label={label} />
      );
    });
    return (
      <li className="press-release">
        <span>{this.props.email.subject}</span> {labels}
        <div>
          <cite className="publishedAgency">From: {this.props.email.from}</cite>
          <span className="publishedDate"> on {this.props.email.date}</span>
          <LabelAdder id={this.props.email.id} />
        </div>
        <p className="summary" dangerouslySetInnerHTML={this.rawMarkup()} />
      </li>
    );
  }
});

var Comment = React.createClass({
  rawMarkup: function() {
    var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
    return { __html: rawMarkup };
  },

  render: function() {
    return (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.author}
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});

var CommentBox = React.createClass({
  handleSearchSubmit: function(comment) {
    console.error('comment', comment);
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        console.error('data', data);
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
  },
  render: function() {
    return (
      <div className="commentBox">
        <h1>Search for emails</h1>
        <SearchForm onSearchSubmit={this.handleSearchSubmit} />
        <ResultsList data={this.state.data} />
      </div>
    );
  }
});

var ResultsList = React.createClass({
  render: function() {
    var commentNodes = this.props.data.map(function(comment) {
      return (
        <Email email={comment} key={comment.id}>
        </Email>
      );
    });
    return (
      <ul className="list-unstyled press">
        {commentNodes}
      </ul>
    );
  }
});

var CommentList = React.createClass({
  render: function() {
    var commentNodes = this.props.data.map(function(comment) {
      return (
        <Comment author={comment.from} key={comment.id}>
          {comment.text}
        </Comment>
      );
    });
    return (
      <div className="commentList">
        {commentNodes}
      </div>
    );
  }
});

var SearchForm = React.createClass({
  getInitialState: function() {
    return {text: ''};
  },
  handleTextChange: function(e) {
    this.setState({text: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var text = this.state.text.trim();
    if (!text) {
      return;
    }
    this.props.onSearchSubmit({text: text});
  },
  render: function() {
    return (
      <form className="commentForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Search for something..."
          value={this.state.text}
          onChange={this.handleTextChange}
        />
        <input type="submit" value="Search" />
      </form>
    );
  }
});

ReactDOM.render(
  <CommentBox url="/api/search" pollInterval={2000} />,
  document.getElementById('profile')
);
